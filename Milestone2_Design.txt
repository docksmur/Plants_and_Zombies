Plants_and_Zombies game 

SYSC 3110 MileStone 1 

Date: November 11, 2013



AUTHORS



David Falardeau 100830500 

Murdock Walsh 100852907 



DESIGN CHOICES 



The coding up to now implements a functional GUI based version of Plants v Zombies. The code 

uses an Observer model for the plants and zombies to communicate with eachother, the event 

source being the model class or GUI where the main function is, and where the grid that holds 

the listenersis made. The GUI utilizes the GridLayout class to create a grid of JButtons that

utilize the functionality from the previous text based version of the game.




CHANGES AND PLANS



The issue with Zombie objects not stopping to attack Plant objects has been fixed, as well as making both subclasses 

of NPC so that both may be put on the same grid and to make it easier to make subclasses of each. A 'Sun Point' system

has been added, to control the addition of more plants to the garden, though for testing purposes, the sun points 

available at the start of the game is fairly high. Subclasses of Plant have been added, namely Sunflower, which earns 

sun points, and Peashooter, which attacks zombies in a row. User input has now been implemented through the GUI that has

has been implemented for the game. Unit testing has also been added for PnZModel.

The future roadmap for the project will involve the addition of more types of plants and zombies, as well as the 

addition of Save/Load feature and a Level Builder mechanic.


We chose to make Plants and Enemies sibling classes so the could both be represented on the same grid (a much more 

obvious and logical design) which also eliminated the need for a second grid saving space. It was also chosen that

the main function should reside in the PnZView class and not the model. This was simply so that we could easily retain

both the text based version as well as the new GUI version. One other change was to make the plant grid (now npc grid)

into a 2d arraylist as opposed to a regular array. This was done because during coding a problem occured that could be 

easily fixed this way or a lot of coding with arrays. I chose the easy way. Other than that most choices just follow 

the design patterns like MVC and Observer/Observable etc.
